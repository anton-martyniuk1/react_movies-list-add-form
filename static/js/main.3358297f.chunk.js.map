{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","onBlur","NewMovie","state","count","titleValue","descriptionValue","imgUrlValue","imdbUrlValue","imdbIdValue","chanheTitleValue","event","setState","target","chanheDescriptionValue","chanheImgUrlValue","chanheImdbUrlValue","chanheImdbIdValue","newMovie","onSubmit","preventDefault","props","onAdd","buttonAvailability","this","disabled","React","Component","App","moviesFromServer","addFilm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3358297f.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { ChangeEvent, useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={onChange}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { ChangeEvent, FormEvent } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\ntype State = {\n  count: number,\n  titleValue: string,\n  descriptionValue: string,\n  imgUrlValue: string,\n  imdbUrlValue: string,\n  imdbIdValue: string,\n};\n\nexport class NewMovie extends React.Component<Props, State> {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  state = {\n    count: 0,\n    titleValue: '',\n    descriptionValue: '',\n    imgUrlValue: '',\n    imdbUrlValue: '',\n    imdbIdValue: '',\n  };\n\n  chanheTitleValue = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ titleValue: event.target.value });\n  };\n\n  chanheDescriptionValue = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ descriptionValue: event.target.value });\n  };\n\n  chanheImgUrlValue = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ imgUrlValue: event.target.value });\n  };\n\n  chanheImdbUrlValue = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ imdbUrlValue: event.target.value });\n  };\n\n  chanheImdbIdValue = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ imdbIdValue: event.target.value });\n  };\n\n  newMovie = () => {\n    return {\n      title: this.state.titleValue,\n      description: this.state.descriptionValue,\n      imgUrl: this.state.imgUrlValue,\n      imdbUrl: this.state.imdbUrlValue,\n      imdbId: this.state.imdbIdValue,\n    };\n  };\n\n  onSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    this.props.onAdd(this.newMovie());\n\n    this.setState(state => ({\n      count: state.count + 1,\n      titleValue: '',\n      descriptionValue: '',\n      imgUrlValue: '',\n      imdbUrlValue: '',\n      imdbIdValue: '',\n    }));\n  };\n\n  buttonAvailability = () => {\n    const {\n      titleValue,\n      imgUrlValue,\n      imdbUrlValue,\n      imdbIdValue,\n    } = this.state;\n\n    return (titleValue === ''\n    || imgUrlValue === ''\n    || imdbUrlValue === ''\n    || imdbIdValue === '');\n  };\n\n  render(): React.ReactNode {\n    const {\n      count,\n      titleValue,\n      descriptionValue,\n      imgUrlValue,\n      imdbUrlValue,\n      imdbIdValue,\n    } = this.state;\n\n    return (\n      <form\n        className=\"NewMovie\"\n        key={count}\n        onSubmit={this.onSubmit}\n      >\n        <h2 className=\"title\">Add a movie</h2>\n\n        <TextField\n          name=\"title\"\n          label=\"Title\"\n          value={titleValue}\n          required\n          onChange={this.chanheTitleValue}\n        />\n\n        <TextField\n          name=\"description\"\n          label=\"Description\"\n          value={descriptionValue}\n          onChange={this.chanheDescriptionValue}\n        />\n\n        <TextField\n          name=\"imgUrl\"\n          label=\"Image URL\"\n          value={imgUrlValue}\n          required\n          onChange={this.chanheImgUrlValue}\n        />\n\n        <TextField\n          name=\"imdbUrl\"\n          label=\"Imdb URL\"\n          value={imdbUrlValue}\n          required\n          onChange={this.chanheImdbUrlValue}\n        />\n\n        <TextField\n          name=\"imdbId\"\n          label=\"Imdb ID\"\n          value={imdbIdValue}\n          required\n          onChange={this.chanheImdbIdValue}\n        />\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              data-cy=\"submit-button\"\n              className=\"button is-link\"\n              disabled={(\n                titleValue === ''\n                || imgUrlValue === ''\n                || imdbUrlValue === ''\n                || imdbIdValue === ''\n              )}\n            >\n              Add\n            </button>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\ntype State = {\n  movies: Movie[]\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addFilm = (movie: Movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addFilm} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}